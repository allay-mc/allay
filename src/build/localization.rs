use std::fs::{self, OpenOptions};
use std::io::Write;

use crate::configuration::localization::{allay_to_minecraft, best_translation, languages};
use crate::environment::Environment;
use crate::paths;
use crate::utils::empty_dir;

pub(crate) fn append_language_files(env: &Environment) {
    for language in languages() {
        if !empty_dir(&paths::prebuild_bp()).unwrap_or(true) {
            // BP
            let p = paths::prebuild_bp().join("texts");
            fs::create_dir(&p).unwrap_or(());
            let lang_file = p.join(format!("{}.lang", allay_to_minecraft(language)));
            let mut f = OpenOptions::new()
                .append(true)
                .create(true)
                .open(lang_file)
                .expect("cannot use language file");
            writeln!(f, "# The content below has been generated by Allay").unwrap();
            writeln!(
                f,
                "pack.name={}",
                best_translation(
                    if env.config.pack.bp.name.is_empty() {
                        &env.config.project.name
                    } else {
                        &env.config.pack.bp.name
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
            writeln!(
                f,
                "pack.description={}",
                best_translation(
                    if env.config.pack.bp.description.is_empty() {
                        &env.config.project.description
                    } else {
                        &env.config.pack.bp.description
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
        }

        if !empty_dir(&paths::prebuild_rp()).unwrap_or(true) {
            // RP
            let p = paths::prebuild_rp().join("texts");
            fs::create_dir(&p).unwrap_or(());
            let lang_file = p.join(format!("{}.lang", allay_to_minecraft(language)));
            let mut f = OpenOptions::new()
                .append(true)
                .create(true)
                .open(lang_file)
                .expect("cannot use language file");
            writeln!(f, "# The content below has been generated by Allay").unwrap();
            writeln!(
                f,
                "pack.name={}",
                best_translation(
                    if env.config.pack.rp.name.is_empty() {
                        &env.config.project.name
                    } else {
                        &env.config.pack.rp.name
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
            writeln!(
                f,
                "pack.description={}",
                best_translation(
                    if env.config.pack.rp.description.is_empty() {
                        &env.config.project.description
                    } else {
                        &env.config.pack.rp.description
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
        }

        if !empty_dir(&paths::prebuild_sp()).unwrap_or(true) {
            // SP
            let p = paths::prebuild_sp().join("texts");
            fs::create_dir(&p).unwrap_or(());
            let lang_file = p.join(format!("{}.lang", allay_to_minecraft(language)));
            let mut f = OpenOptions::new()
                .append(true)
                .create(true)
                .open(lang_file)
                .expect("cannot use language file");
            writeln!(f, "# The content below has been generated by Allay").unwrap();
            writeln!(
                f,
                "pack.name={}",
                best_translation(
                    if env.config.pack.sp.name.is_empty() {
                        &env.config.project.name
                    } else {
                        &env.config.pack.sp.name
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
            writeln!(
                f,
                "pack.description={}",
                best_translation(
                    if env.config.pack.sp.description.is_empty() {
                        &env.config.project.description
                    } else {
                        &env.config.pack.sp.description
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
        }

        if !empty_dir(&paths::prebuild_wt()).unwrap_or(true) {
            // RP
            let p = paths::prebuild_wt().join("texts");
            fs::create_dir(&p).unwrap_or(());
            let lang_file = p.join(format!("{}.lang", allay_to_minecraft(language)));
            let mut f = OpenOptions::new()
                .append(true)
                .create(true)
                .open(lang_file)
                .expect("cannot use language file");
            writeln!(f, "# The content below has been generated by Allay").unwrap();
            writeln!(
                f,
                "pack.name={}",
                best_translation(
                    if env.config.pack.wt.name.is_empty() {
                        &env.config.project.name
                    } else {
                        &env.config.pack.wt.name
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
            writeln!(
                f,
                "pack.description={}",
                best_translation(
                    if env.config.pack.wt.description.is_empty() {
                        &env.config.project.description
                    } else {
                        &env.config.pack.wt.description
                    },
                    language,
                    env.config.localization.primary_language.as_str()
                )
            )
            .unwrap();
        }
    }
}
