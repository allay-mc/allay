use std::fs::{self, OpenOptions};
use std::io::Write;

use anyhow::Context;

use crate::addon::AddonType;
use crate::configuration::localization::{allay_to_minecraft, best_translation, languages};
use crate::environment::Environment;
use crate::paths;
use crate::utils::empty_dir;

pub(crate) fn append_language_files(env: &Environment) -> anyhow::Result<()> {
    for language in languages() {
        for pack in AddonType::all() {
            if !empty_dir(&paths::root().join(pack.path_prebuild())).unwrap_or(true) {
                let p = paths::root().join(pack.path_prebuild()).join("texts");
                fs::create_dir(&p).unwrap_or(());
                let lang_file = p.join(format!("{}.lang", allay_to_minecraft(language)));
                let mut f = OpenOptions::new()
                    .append(true)
                    .create(true)
                    .open(lang_file)
                    .with_context(|| "cannot use language file")?;
                writeln!(f, "# The content below has been generated by Allay")?;
                writeln!(
                    f,
                    "pack.name={}",
                    best_translation(
                        match pack {
                            AddonType::BehaviorPack => {
                                if env.config.as_ref().unwrap().pack.bp.name.is_empty() {
                                    &env.config.as_ref().unwrap().project.name
                                } else {
                                    &env.config.as_ref().unwrap().pack.bp.name
                                }
                            }
                            AddonType::ResourcePack => {
                                if env.config.as_ref().unwrap().pack.rp.name.is_empty() {
                                    &env.config.as_ref().unwrap().project.name
                                } else {
                                    &env.config.as_ref().unwrap().pack.rp.name
                                }
                            }
                            AddonType::SkinPack => {
                                if env.config.as_ref().unwrap().pack.sp.name.is_empty() {
                                    &env.config.as_ref().unwrap().project.name
                                } else {
                                    &env.config.as_ref().unwrap().pack.sp.name
                                }
                            }
                            AddonType::WorldTemplate => {
                                if env.config.as_ref().unwrap().pack.wt.name.is_empty() {
                                    &env.config.as_ref().unwrap().project.name
                                } else {
                                    &env.config.as_ref().unwrap().pack.wt.name
                                }
                            }
                        },
                        language,
                        env.config
                            .as_ref()
                            .unwrap()
                            .localization
                            .primary_language
                            .as_str()
                    )
                    .with_context(|| "cannot find suitable translation")? // TODO: better message
                )?;
                writeln!(
                    f,
                    "pack.description={}",
                    best_translation(
                        match pack {
                            AddonType::BehaviorPack => {
                                if env.config.as_ref().unwrap().pack.bp.description.is_empty() {
                                    &env.config.as_ref().unwrap().project.description
                                } else {
                                    &env.config.as_ref().unwrap().pack.bp.description
                                }
                            }
                            AddonType::ResourcePack => {
                                if env.config.as_ref().unwrap().pack.rp.description.is_empty() {
                                    &env.config.as_ref().unwrap().project.description
                                } else {
                                    &env.config.as_ref().unwrap().pack.rp.description
                                }
                            }
                            AddonType::SkinPack => {
                                if env.config.as_ref().unwrap().pack.sp.description.is_empty() {
                                    &env.config.as_ref().unwrap().project.description
                                } else {
                                    &env.config.as_ref().unwrap().pack.sp.description
                                }
                            }
                            AddonType::WorldTemplate => {
                                if env.config.as_ref().unwrap().pack.wt.description.is_empty() {
                                    &env.config.as_ref().unwrap().project.description
                                } else {
                                    &env.config.as_ref().unwrap().pack.wt.description
                                }
                            }
                        },
                        language,
                        env.config
                            .as_ref()
                            .unwrap()
                            .localization
                            .primary_language
                            .as_str()
                    )
                    .with_context(|| "cannot find suitable translation")? // TODO: better message
                )?;
            }
        }
    }

    Ok(())
}
