use allay::paths;
use clap::{Arg, ArgAction, ArgMatches, Command};
use std::{fs, process::ExitCode};

pub fn cmd() -> Command {
    Command::new("logs")
        .about("Manage log files generated by Allay")
        .arg(
            Arg::new("delete")
                .short('d')
                .long("delete")
                .help("Deletes all log files")
                .action(ArgAction::SetTrue),
        )
}

pub fn run(matches: &ArgMatches) -> ExitCode {
    let path = paths::logs();
    let delete = matches.get_flag("delete");

    let mut result = ExitCode::SUCCESS;
    if delete {
        for entry in path.read_dir().expect("failed to read log directory") {
            match entry {
                Ok(entry) => match fs::remove_file(entry.path()) {
                    Ok(_) => {
                        log::debug!("Removed log file {:?}", entry.file_name())
                    }
                    Err(e) => {
                        log::error!("Failed to remove log file {:?}: {}", entry.file_name(), e);
                        result = ExitCode::FAILURE;
                    }
                },
                Err(e) => {
                    log::error!("Failed to read log directory: {}", e);
                    result = ExitCode::FAILURE;
                }
            };
        }
    } else {
        println!("{}", paths::logs().display());
    }
    result
}
